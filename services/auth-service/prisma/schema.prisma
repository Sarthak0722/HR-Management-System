// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  HR
  EMPLOYEE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  SICK_LEAVE
  VACATION
  PERSONAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employeeProfile EmployeeProfile?
  leaveRequests   Leave[]
  attendance      Attendance[]
  notifications   Notification[]
  payrollRecords  PayrollRecord[]
  performanceReviews PerformanceReview[]
  reviewedPerformanceReviews PerformanceReview[] @relation("PerformanceReviewer")
  trainingEnrollments TrainingEnrollment[]
  documents       Document[]
  jobApplications JobApplication[]
  goals           Goal[]
  leaveBalances   LeaveBalance[]

  @@map("users")
}

model EmployeeProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  firstName    String
  lastName     String
  phone        String?
  address      String?
  departmentId String?
  positionId   String?
  salary       Float?
  hireDate     DateTime?
  employeeId   String?  @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  department  Department? @relation(fields: [departmentId], references: [id])
  position    Position?   @relation(fields: [positionId], references: [id])
  managedDept Department? @relation("DepartmentManager")

  @@map("employee_profiles")
}

model Leave {
  id          String      @id @default(cuid())
  userId      String
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leaves")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  managerId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employees  EmployeeProfile[]
  manager    EmployeeProfile? @relation("DepartmentManager", fields: [managerId], references: [id])
  positions  Position[]
  jobPostings JobPosting[]

  @@map("departments")
}

model Position {
  id          String   @id @default(cuid())
  title       String
  departmentId String
  description String?
  minSalary   Float?
  maxSalary   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  department Department @relation(fields: [departmentId], references: [id])
  employees  EmployeeProfile[]
  jobPostings JobPosting[]

  @@map("positions")
}

model Attendance {
  id         String    @id @default(cuid())
  userId     String
  date       DateTime
  checkIn    DateTime?
  checkOut   DateTime?
  totalHours Float?
  status     AttendanceStatus @default(PRESENT)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("attendance")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CompanySettings {
  id                String   @id @default(cuid())
  companyName       String
  companyEmail      String
  companyPhone      String?
  companyAddress    String?
  workingHoursStart String   @default("09:00")
  workingHoursEnd   String   @default("17:00")
  workingDays       String[] @default(["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"])
  leavePolicy       Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("company_settings")
}

// Payroll Management
model PayrollRecord {
  id              String        @id @default(cuid())
  userId          String
  month           Int
  year            Int
  basicSalary     Float
  allowances      Float         @default(0)
  deductions      Float         @default(0)
  overtimePay     Float         @default(0)
  bonus           Float         @default(0)
  netSalary       Float
  status          PayrollStatus @default(DRAFT)
  processedAt     DateTime?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
  @@map("payroll_records")
}

// Performance Management
model PerformanceReview {
  id              String           @id @default(cuid())
  userId          String
  reviewerId       String
  reviewPeriod     String
  goals           Json?
  achievements    Json?
  rating          PerformanceRating
  feedback        String?
  improvementPlan String?
  nextReviewDate  DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer User @relation("PerformanceReviewer", fields: [reviewerId], references: [id])

  @@map("performance_reviews")
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime
  status      String   @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, COMPLETED, CANCELLED
  progress    Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// Training & Development
model TrainingProgram {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int      // in days
  cost        Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments TrainingEnrollment[]

  @@map("training_programs")
}

model TrainingEnrollment {
  id                String        @id @default(cuid())
  userId            String
  trainingProgramId String
  status            TrainingStatus @default(NOT_STARTED)
  enrolledAt        DateTime      @default(now())
  completedAt       DateTime?
  score             Float?
  certificate       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id])

  @@unique([userId, trainingProgramId])
  @@map("training_enrollments")
}

// Document Management
model Document {
  id          String       @id @default(cuid())
  userId      String
  title       String
  type        DocumentType
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  isPublic    Boolean      @default(false)
  uploadedAt  DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Recruitment Management
model JobPosting {
  id              String    @id @default(cuid())
  title           String
  departmentId    String
  positionId       String?
  description     String
  requirements    String
  responsibilities String
  salaryMin       Float?
  salaryMax       Float?
  location        String?
  employmentType  String    @default("FULL_TIME") // FULL_TIME, PART_TIME, CONTRACT, INTERNSHIP
  status          JobStatus @default(DRAFT)
  postedAt        DateTime?
  closedAt        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  department Department      @relation(fields: [departmentId], references: [id])
  position   Position?       @relation(fields: [positionId], references: [id])
  applications JobApplication[]

  @@map("job_postings")
}

model JobApplication {
  id            String            @id @default(cuid())
  jobPostingId  String
  userId        String?
  candidateName String
  candidateEmail String
  candidatePhone String?
  resume        String?
  coverLetter   String?
  status        ApplicationStatus @default(APPLIED)
  appliedAt     DateTime          @default(now())
  reviewedAt    DateTime?
  interviewedAt DateTime?
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id])

  @@map("job_applications")
}

// Leave Balance Tracking
model LeaveBalance {
  id              String   @id @default(cuid())
  userId          String
  leaveType       LeaveType
  totalDays       Int      @default(0)
  usedDays        Int      @default(0)
  remainingDays   Int      @default(0)
  year            Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leaveType, year])
  @@map("leave_balances")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  WORK_FROM_HOME
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  LEAVE_APPROVAL
  LEAVE_REJECTION
  ATTENDANCE_REMINDER
  PAYROLL_PROCESSED
  PERFORMANCE_REVIEW
  TRAINING_ASSIGNED
  DOCUMENT_UPLOADED
}

enum PayrollStatus {
  DRAFT
  PROCESSED
  PAID
  CANCELLED
}

enum PerformanceRating {
  EXCELLENT
  GOOD
  SATISFACTORY
  NEEDS_IMPROVEMENT
  UNSATISFACTORY
}

enum TrainingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum DocumentType {
  CONTRACT
  ID_PROOF
  ADDRESS_PROOF
  EDUCATIONAL_CERTIFICATE
  EXPERIENCE_CERTIFICATE
  MEDICAL_CERTIFICATE
  OTHER
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  CANCELLED
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  SELECTED
  REJECTED
  WITHDRAWN
}
